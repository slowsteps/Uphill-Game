package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;		public class Shop extends MovieClip {		private var myLoader:GameLoader		private var products:Array		public function Shop(inLoader:GameLoader) {			myLoader = inLoader			x = 0			y = 0			continuebutton.addEventListener(MouseEvent.CLICK,onContinue)			createProducts()			showProducts()			updateCoinsField()		}		public function show() {			visible = true			this.updateCoinsField()		}		private function onContinue(e:Event) {			visible = false			myLoader.reset();		}				private function createProducts() {						products = new Array()						var upgradesCost:Array = new Array(50,100,200,500,750,1000)			var upgradesValue:Array = new Array(20,30,40,50,75,100)			var upgradesBought:int = 2			var thumb = new ThumbWheel()			var wheelproduct = new ShopProduct("wheel",thumb,upgradesCost,upgradesValue,upgradesBought)			products.push(wheelproduct)													var upgradesCost:Array = new Array(10,20,30,40,50,60)			var upgradesValue:Array = new Array(50,100,200,400,700,1000)			var upgradesBought:int = 0			var thumb = new FuelTank()			var wheelproduct = new ShopProduct("fuel",thumb,upgradesCost,upgradesValue,upgradesBought)			products.push(wheelproduct)													var upgradesCost:Array = new Array(20,40,60,80,120,250)			var upgradesValue:Array = new Array(0.92,0.93,0.95,0.97,0.98,0.99)			var upgradesBought:int = 0			var thumb = new ThumbEngine()			var wheelproduct = new ShopProduct("engine",thumb,upgradesCost,upgradesValue,upgradesBought)			products.push(wheelproduct)																						}				private function showProducts() {						var padding:Number = 15;			var posy = 80						for each (var product:ShopProduct in products) {																//thumb				var thumb = addChild(product.thumb)				thumb.y = posy				thumb.x = 50				product.upgradeIcons = new Array()				for (var i=0;i<product.upgradesCost.length;i++) {										//progress icons					if (i<product.upgradesBought) var upgradeIcon = new UpgradeIconBought()					else var upgradeIcon = new UpgradeIconNotBought()					var posx = i*(upgradeIcon.width + padding) + 180					upgradeIcon.x = posx					upgradeIcon.y = posy					addChild(upgradeIcon)					product.upgradeIcons.push(upgradeIcon)									}								if (product.upgradesBought < product.upgradesCost.length) {					//cost of next upgrade					var costLabel = new ProductCostLabel()					costLabel.textfield.text = "$ " + product.upgradesCost[product.upgradesBought]					addChild(costLabel)					posx = posx + padding + upgradeIcon.width					costLabel.x = posx					costLabel.y = posy										//buy button										var buyButton:BuyButton = new BuyButton()					buyButton.targetProduct = product					buyButton.targetCostLabel = costLabel					buyButton.addEventListener(MouseEvent.CLICK,onBuy)					addChild(buyButton)					posx = posx + padding + costLabel.width					buyButton.x = posx					buyButton.y = posy				}								else {					//maxed out, nothing to buy					var costLabel = new ProductCostLabel()					costLabel.textfield.text = "maxed out"					addChild(costLabel)					posx = posx + padding + upgradeIcon.width					costLabel.x = posx					costLabel.y = posy									}								posy = posy + 100							}							}				private function updateCoinsField() {			this.coinstextfield.text = "$" + Gamestate.coins		}				private function onBuy(e:MouseEvent) {						var callingBuyButton:BuyButton = e.currentTarget as BuyButton			var curProduct:ShopProduct = callingBuyButton.targetProduct			//check wallet			if (Gamestate.coins < curProduct.upgradesCost[curProduct.upgradesBought]) {				trace("not enough funds")				return			}			else {				trace("funds sufficient")				Gamestate.coins = Gamestate.coins - curProduct.upgradesCost[curProduct.upgradesBought]				this.updateCoinsField()			}									//from red to green icon			var notBoughtIcon = curProduct.upgradeIcons[curProduct.upgradesBought]			var boughtIcon = new UpgradeIconBought()			addChild(boughtIcon)			boughtIcon.x = notBoughtIcon.x			boughtIcon.y = notBoughtIcon.y						//update affected game setting			if (curProduct.productName == "wheel") {				Gamestate.wheel = curProduct.upgradesValue[curProduct.upgradesBought]				trace("Setting wheel to: ",Gamestate.wheel)			}						else if (curProduct.productName == "fuel") {				Gamestate.fuel = curProduct.upgradesValue[curProduct.upgradesBought]				trace("Setting fuel to: ",Gamestate.fuel)			}						else if (curProduct.productName == "engine") {				Gamestate.engine = curProduct.upgradesValue[curProduct.upgradesBought]				trace("Setting engine to: ",Gamestate.engine)			}			else trace("unknow productname: ",curProduct.productName)			curProduct.upgradesBought++						//final upgrade, maxed out			if (curProduct.upgradesBought == curProduct.upgradesCost.length) {				callingBuyButton.visible = false				callingBuyButton.targetCostLabel.textfield.text = "Maxed out"			}			//still upgrades to buy			else {				callingBuyButton.targetCostLabel.textfield.text = "$ " + curProduct.upgradesCost[curProduct.upgradesBought]			}					}			}	}